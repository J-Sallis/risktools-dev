daysFromExpiry = 200,
from = "2012-01-01",
conversion = c(1, 1),
feed = "CME_NymexFutures_EOD",
iuser = username,
ipassword = password,
title = "March/April ULSD Nymex Spreads",
yaxis = "$ per bbl",
output = "chart"
)
setwd("~/PROJECTS/cpd")
![OHLC](./images/8_OHLC.png){width=80%}
![OHLC](./images/8_OHLC.png){width=80%}
![OHLC](./images/8_OHLC.png){width=80%}
![OHLC](./images/8_OHLC.png){width=80%}
![OHLC](./images/8_OHLC.png){width=80%}
install.packages("bookdown")
install.packages("downlit")
setwd("~/PROJECTS/risktools-dev")
library(PerformanceAnalytics)
library(tidyverse)
library(tidyquant)
library(RTL)
library(timetk)
library(jsonlite)
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../user.json"))
username <- up$"m*"$user
password <- up$"m*"$pass
eia_key <- up$eia
q_key <- Sys.getenv("QUANDL_KEY")
# ir_df_us
## Must be run on the same day as the data pull since the function only gets the last
## 30 days
df <- ir_df_us(quandlkey = up$"quandl")
df
bond(ytm = 0.05, C = 0.05, T2M = 1, m = 2, output = "df")
tradeStats(x = spy, Rf = 0)
spy <- tq_get("SPY", from = "2000-01-01", to = "2012-01-01", return.class = "zoo")
spy <- spy$SPY.Adjusted
spy <- spy / xts::lag.xts(spy) - 1
tradeStats(x = spy, Rf = 0)
returns(df = dflong_rd, retType = "rel", period.return = 1, spread = TRUE)
library(PerformanceAnalytics)
library(tidyverse)
library(tidyquant)
library(RTL)
library(timetk)
library(jsonlite)
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../user.json"))
username <- up$"m*"$user
password <- up$"m*"$pass
eia_key <- up$eia
q_key <- Sys.getenv("QUANDL_KEY")
# returns
# round dflong to 4 decimals before calc because toJSON only writes
# to 4 decimals
dflong_rd <- dflong
dflong_rd$value <- round(dflong_rd$value, 4)
returns(df = dflong_rd, retType = "rel", period.return = 1, spread = TRUE)
library(RTL)
library(rjson)
library(rjson)
library(jsonlite)
library(geojson)
install.packages('geojson')
install.packages('protobuf-compiler')
install.packages('geojson')
library(geojson)
save_loc = ''
d <- data(package='RTL')
filenames = d$results[,'Item']
for (fn in filenames) {
tryCatch({
# use jsonlite first as it preserves dates properly
data <- eval(parse(text=paste0('RTL::',fn)))
data <- jsonlite::toJSON(data)
write(data,paste0(save_loc,fn,'.json'))
}, error = function(e) {
print(fn)
tryCatch({
# first try geojson conversion for geospatial data
data <- eval(parse(text=paste0('RTL::',fn)))
data <- as.geojson(data)
write(data,paste0(save_loc,fn,'.geojson'))
}, error = function(e) {
# then use rjson as a last resort since it doesn't preserve dates
data <- eval(parse(text=paste0('RTL::',fn)))
data <- rjson::toJSON(data)
write(data,paste0(save_loc,fn,'.json'))
})
}
)
}
setwd("~/PROJECTS/risktools-dev/src/risktools/data")
for (fn in filenames) {
tryCatch({
# use jsonlite first as it preserves dates properly
data <- eval(parse(text=paste0('RTL::',fn)))
data <- jsonlite::toJSON(data)
write(data,paste0(save_loc,fn,'.json'))
}, error = function(e) {
print(fn)
tryCatch({
# first try geojson conversion for geospatial data
data <- eval(parse(text=paste0('RTL::',fn)))
data <- as.geojson(data)
write(data,paste0(save_loc,fn,'.geojson'))
}, error = function(e) {
# then use rjson as a last resort since it doesn't preserve dates
data <- eval(parse(text=paste0('RTL::',fn)))
data <- rjson::toJSON(data)
write(data,paste0(save_loc,fn,'.json'))
})
}
)
}
RTL::cancrudeassays
dflong
returns(df = dflong_rd, retType = "rel", period.return = 1, spread = TRUE)
# returns
# round dflong to 4 decimals before calc because toJSON only writes
# to 4 decimals
dflong_rd <- dflong
dflong_rd$value <- round(dflong_rd$value, 4)
ou1 <- returns(df = dflong_rd, retType = "rel", period.return = 1, spread = TRUE)
ou1
rolladjust(x = ret, commodityname = c("cmewti"), rolltype = c("Last.Trade"))
ret <- returns(df = dflong, retType = "abs", period.return = 1, spread = TRUE)[, 1:2]
rolladjust(x = ret, commodityname = c("cmewti"), rolltype = c("Last.Trade"))
dflong
dflong$series
unique(dflong$series)
# rolladjust
dfra <- dflong %>% filter(series='CL01')
# rolladjust
dfra <- dflong %>% filter(series=='CL01')
dfra
ret <- returns(df = dfra, retType = "abs", period.return = 1, spread = TRUE)[, 1:2]
ou <- rolladjust(x = ret, commodityname = c("cmewti"), rolltype = c("Last.Trade"))
ou
setwd("~/PROJECTS/risktools-dev/pytest")
write(jsonlite::toJSON(ou), "rolladjust.json")
Sys.getenv("EIA")
Sys.getenv("MS_USER")
Sys.getenv(c("MS_USER"))
setwd("~/PROJECTS/risktools-dev/R")
Sys.getenv(c("MS_USER"))
Sys.getenv("MS_USER")
Sys.getenv()
Sys.getenv()
library(RTL)
library(PerformanceAnalytics)
library(tidyverse)
library(tidyquant)
library(timetk)
library(jsonlite)
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../user.json"))
username <- up$"m*"$user
password <- up$"m*"$pass
eia_key <- up$eia
q_key <- Sys.getenv("QUANDL_KEY")
EIAkey <- up$eia
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../user.json"))
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../../user.json"))
username <- up$"m*"$user
password <- up$"m*"$pass
EIAkey <- up$eia
q_key <- Sys.getenv("QUANDL_KEY")
chart_eia_steo(key = EIAkey, market = "globalOil")
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
library(reticulate)
conda_python('risktools')
conda_python('risktools')
reticulate::repl_python()
chart_eia_steo(key = EIAkey, market = "globalOil")
reticulate::repl_python()
?conda_python
use_condaenv("risktools", required = TRUE)
conda_python('risktools')
use_condaenv("/home/bcho/miniconda3/envs/risktools/bin/python", required = TRUE)
conda_list()
use_condaenv("risktools")
reticulate::repl_python()
conda_python('risktools')
conda_list()
use_condaenv("risktools")
reticulate::repl_python()
py_config()
use_condaenv("risktools")
py_config()
?use_condaenv
use_condaenv("risktools", required=TRUE)
use_condaenv("risktools", required=TRUE)
use_condaenv("risktools", required=TRUE)
py_config()
use_condaenv("risktools", required=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(RTL)
library(PerformanceAnalytics)
library(tidyverse)
library(tidyquant)
library(timetk)
library(jsonlite)
library(reticulate)
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../../user.json"))
username <- up$"m*"$user
password <- up$"m*"$pass
EIAkey <- up$eia
q_key <- Sys.getenv("QUANDL_KEY")
conda_python('risktools')
conda_list()
use_condaenv("risktools", required=TRUE)
py_config()
reticulate::repl_python()
chart_eia_steo(key = EIAkey, market = "globalOil")
reticulate::repl_python()
EIAkey
reticulate::repl_python()
chart_eia_steo(key = EIAkey, market = "mogas")
chart_eia_steo(key = EIAkey, market = "mogas")
reticulate::repl_python()
chart_eia_steo(key = EIAkey, market = "globalOil")
reticulate::repl_python()
htmltools::includeHTML("temp-plot.html")
reticulate::repl_python()
```{r, echo=FALSE}
htmltools::includeHTML("temp-plot.html")
ls("package:RTL")
gg <- ls("package:RTL")
for (g in gg) {print(g)}
gg <- lsf.str("package:RTL")
for (g in gg) {print(g)}
x <- dplyr::tibble(date = seq.Date(Sys.Date()-1000, Sys.Date(),1),CL01 = c(rnorm(501,0,0.02),rnorm(500,0,0.01)))
distdescplot(x=x)
install.packages("fitdistrplus")
distdescplot(x=x)
x
fields <-  c("open","high","low","close")
gsub(" ","",fields)
feed = "Crb_Futures_Price_Volume_And_Open_Interest"
contract = "CL"
date ="2020-08-10",
fields = c("Open, High, Low, Close"),
paste0("/lds/feeds/",feed, "/curve?root=",contract,"&cols=",gsub(" ","",fields),"&date=",date)
feed = "Crb_Futures_Price_Volume_And_Open_Interest"
contract = "CL"
date ="2020-08-10"
fields = c("Open, High, Low, Close")
paste0("/lds/feeds/",feed, "/curve?root=",contract,"&cols=",gsub(" ","",fields),"&date=",date)
knitr::opts_chunk$set(echo = TRUE)
getCurve(iuser=username, ipass=password, date='2021-12-20')
getCurve <- function(feed = "Crb_Futures_Price_Volume_And_Open_Interest",contract = "CL",date ="2020-08-10",
fields = c("Open, High, Low, Close"),
iuser = "x@xyz.com", ipassword = "pass") {
URL = httr::modify_url(url = "https://mp.morningstarcommodity.com",
path = paste0("/lds/feeds/",feed, "/curve?root=",contract,"&cols=",gsub(" ","",fields),
"&date=",date))
es = RCurl::getURL(url = URL, userpw = paste(iuser,ipassword,sep = ":"))
out <- jsonlite::fromJSON(es) %>%
dplyr::as_tibble() %>%
dplyr::arrange(deliveryStartDate)
return(out)
if (grepl("LME_MonthlyDelayed_Derived",feed)) {
out <- out %>% dplyr::mutate(expirationDate = lubridate::rollback(as.Date(deliveryStartDate),roll_to_first = T) - 1)
es <- NA
} else {
es <- out$keys %>% unlist() %>% unique()
}
out <- out %>%
dplyr::transmute(expirationDate = as.Date(expirationDate),
type = col,
value = as.numeric(value)) %>%
tidyr::pivot_wider(names_from = type, values_from = value) %>%
dplyr::arrange(expirationDate)
out <- out %>%
dplyr::mutate(contract = paste(contract, sprintf('%0.2d', 1:nrow(out)), sep = ""),
code = es) %>%
dplyr::select(contract, code, dplyr::everything())
return(out)
}
getCurve(iuser=username, ipass=password, date='2021-12-20')
getCurve <- function(feed = "Crb_Futures_Price_Volume_And_Open_Interest",contract = "CL",date ="2020-08-10",
fields = c("Open, High, Low, Close"),
iuser = "x@xyz.com", ipassword = "pass") {
URL = httr::modify_url(url = "https://mp.morningstarcommodity.com",
path = paste0("/lds/feeds/",feed, "/curve?root=",contract,"&cols=",gsub(" ","",fields),
"&date=",date))
es = RCurl::getURL(url = URL, userpw = paste(iuser,ipassword,sep = ":"))
out <- jsonlite::fromJSON(es) %>%
dplyr::as_tibble() %>%
dplyr::arrange(deliveryStartDate)
# return(out)
if (grepl("LME_MonthlyDelayed_Derived",feed)) {
out <- out %>% dplyr::mutate(expirationDate = lubridate::rollback(as.Date(deliveryStartDate),roll_to_first = T) - 1)
es <- NA
} else {
es <- out$keys %>% unlist() %>% unique()
}
out <- out %>%
dplyr::transmute(expirationDate = as.Date(expirationDate),
type = col,
value = as.numeric(value)) %>%
tidyr::pivot_wider(names_from = type, values_from = value) %>%
dplyr::arrange(expirationDate)
out <- out %>%
dplyr::mutate(contract = paste(contract, sprintf('%0.2d', 1:nrow(out)), sep = ""),
code = es) %>%
dplyr::select(contract, code, dplyr::everything())
return(out)
}
getCurve(iuser=username, ipass=password, date='2021-12-20')
getCurve <- function(feed = "Crb_Futures_Price_Volume_And_Open_Interest",contract = "CL",date ="2020-08-10",
fields = c("Open, High, Low, Close"),
iuser = "x@xyz.com", ipassword = "pass") {
URL = httr::modify_url(url = "https://mp.morningstarcommodity.com",
path = paste0("/lds/feeds/",feed, "/curve?root=",contract,"&cols=",gsub(" ","",fields),
"&date=",date))
es = RCurl::getURL(url = URL, userpw = paste(iuser,ipassword,sep = ":"))
out <- jsonlite::fromJSON(es) %>%
dplyr::as_tibble() %>%
dplyr::arrange(deliveryStartDate)
return(out)
if (grepl("LME_MonthlyDelayed_Derived",feed)) {
out <- out %>% dplyr::mutate(expirationDate = lubridate::rollback(as.Date(deliveryStartDate),roll_to_first = T) - 1)
es <- NA
} else {
es <- out$keys %>% unlist() %>% unique()
}
out <- out %>%
dplyr::transmute(expirationDate = as.Date(expirationDate),
type = col,
value = as.numeric(value)) %>%
tidyr::pivot_wider(names_from = type, values_from = value) %>%
dplyr::arrange(expirationDate)
out <- out %>%
dplyr::mutate(contract = paste(contract, sprintf('%0.2d', 1:nrow(out)), sep = ""),
code = es) %>%
dplyr::select(contract, code, dplyr::everything())
return(out)
}
getCurve(iuser=username, ipass=password, date='2021-12-20')
getCurve <- function(feed = "Crb_Futures_Price_Volume_And_Open_Interest",contract = "CL",date ="2020-08-10",
fields = c("Open, High, Low, Close"),
iuser = "x@xyz.com", ipassword = "pass") {
URL = httr::modify_url(url = "https://mp.morningstarcommodity.com",
path = paste0("/lds/feeds/",feed, "/curve?root=",contract,"&cols=",gsub(" ","",fields),
"&date=",date))
es = RCurl::getURL(url = URL, userpw = paste(iuser,ipassword,sep = ":"))
out <- jsonlite::fromJSON(es) %>%
dplyr::as_tibble() %>%
dplyr::arrange(deliveryStartDate)
# return(out)
if (grepl("LME_MonthlyDelayed_Derived",feed)) {
out <- out %>% dplyr::mutate(expirationDate = lubridate::rollback(as.Date(deliveryStartDate),roll_to_first = T) - 1)
es <- NA
} else {
es <- out$keys %>% unlist() %>% unique()
}
out <- out %>%
dplyr::transmute(expirationDate = as.Date(expirationDate),
type = col,
value = as.numeric(value)) %>%
tidyr::pivot_wider(names_from = type, values_from = value) %>%
dplyr::arrange(expirationDate)
out <- out %>%
dplyr::mutate(contract = paste(contract, sprintf('%0.2d', 1:nrow(out)), sep = ""),
code = es) %>%
dplyr::select(contract, code, dplyr::everything())
return(out)
}
getCurve(iuser=username, ipass=password, date='2021-12-20')
sprintf('%0.2d', 1:nrow(out))
sprintf('%0.2d', 1:10)
getCurve(iuser=username, ipass=password, date='2021-12-20', root=c("CL","BG"))
getCurve(iuser=username, ipass=password, date='2021-12-20', contract=c("CL","BG"))
getCurve(iuser=username, ipass=password, date='2021-12-20', contract="CL")
setwd("~/PROJECTS/risktools-dev/pytest")
df <- getCurve(iuser=username, ipass=password, date='2021-12-20', contract="CL")
write(jsonlite::toJSON(df, digits = 8), "getCurveCL.json")
df <- getCurve(iuser=username, ipass=password, date='2021-12-20', contract="BG")
write(jsonlite::toJSON(df, digits = 8), "getCurveBG.json")
tickQL = c("d1d","d1w","d1m","d3m","d6m","d1y",
paste0("fut",1:8),
paste0("s",c(2,3,5,7,10,15,20,30),"y")),
type = c(rep("ICE.LIBOR",6),rep("EuroDollar",8),rep("IRS",8)),
source = c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8)),
tickSource = c("USDONTD156N","USD1WKD156N","USD1MTD156N","USD3MTD156N","USD6MTD156N","USD12MD156N",
paste0("ED_",sprintf('%0.3d', 1:8),"_Month"),
paste0("ICERATES1100USD",c(2,3,5,7,10,15,20,30),"Y"))
tickQL = c("d1d","d1w","d1m","d3m","d6m","d1y",
paste0("fut",1:8),
paste0("s",c(2,3,5,7,10,15,20,30),"y")),
type = c(rep("ICE.LIBOR",6),rep("EuroDollar",8),rep("IRS",8)),
source = c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8)),
tickSource = c("USDONTD156N","USD1WKD156N","USD1MTD156N","USD3MTD156N","USD6MTD156N","USD12MD156N",
paste0("ED_",sprintf('%0.3d', 1:8),"_Month"),
paste0("ICERATES1100USD",c(2,3,5,7,10,15,20,30),"Y"))
c("d1d","d1w","d1m","d3m","d6m","d1y",
paste0("fut",1:8),
paste0("s",c(2,3,5,7,10,15,20,30),"y"))
type = c(rep("ICE.LIBOR",6),rep("EuroDollar",8),rep("IRS",8))
c(rep("ICE.LIBOR",6),rep("EuroDollar",8),rep("IRS",8))
c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8
c("USDONTD156N","USD1WKD156N","USD1MTD156N","USD3MTD156N","USD6MTD156N","USD12MD156N",
paste0("ED_",sprintf('%0.3d', 1:8),"_Month")
paste0("ICERATES1100USD",c(2,3,5,7,10,15,20,30),"Y"))
c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8)
c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8))
c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8))
c("USDONTD156N","USD1WKD156N","USD1MTD156N","USD3MTD156N","USD6MTD156N","USD12MD156N",
paste0("ED_",sprintf('%0.3d', 1:8),"_Month")
paste0("ICERATES1100USD",c(2,3,5,7,10,15,20,30),"Y"))
c("USDONTD156N","USD1WKD156N","USD1MTD156N","USD3MTD156N","USD6MTD156N","USD12MD156N",
paste0("ED_",sprintf('%0.3d', 1:8),"_Month"),
paste0("ICERATES1100USD",c(2,3,5,7,10,15,20,30),"Y"))
?getIRswapCurve
a <- c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8))
for (c in a){print(c)}
library(PerformanceAnalytics)
library(tidyverse)
library(tidyquant)
library(RTL)
library(timetk)
library(jsonlite)
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../user.json"))
username <- up$"m*"$user
password <- up$"m*"$pass
eia_key <- up$eia
q_key <- Sys.getenv("QUANDL_KEY")
# Give the input file name to the function.
up <- jsonlite::fromJSON(file("../../user.json"))
username <- up$"m*"$user
password <- up$"m*"$pass
eia_key <- up$eia
q_key <- Sys.getenv("QUANDL_KEY")
# getCurve
df <- getCurve(iuser=username, ipass=password, date='2021-12-20', contract="CL")
write(jsonlite::toJSON(df, digits = 8), "getCurveCL.json")
df <- getCurve(iuser=username, ipass=password, date='2021-12-20', contract="BG")
write(jsonlite::toJSON(df, digits = 8), "getCurveBG.json")
# swapIRS
data("usSwapCurves")
df <- swapIRS(trade.date = as.Date("2020-01-04"), eff.date = as.Date("2020-01-06"),
mat.date = as.Date("2022-01-06"), notional = 1000000,
PayRec = "Rec", fixed.rate=0.05, float.curve = usSwapCurves, reset.freq=3,
disc.curve = usSwapCurves, convention = c("act",360),
bus.calendar = "NY", output = "all")
df
df <- swapIRS(trade.date = as.Date("2021-12-26"), eff.date = as.Date("2021-12-28"),
mat.date = as.Date("2023-12-28"), notional = 1000000,
PayRec = "Rec", fixed.rate=0.05, float.curve = usSwapCurves, reset.freq=3,
disc.curve = usSwapCurves, convention = c("act",360),
bus.calendar = "NY", output = "all")
df
df <- swapIRS(trade.date = as.Date("2021-12-26"), eff.date = as.Date("2021-12-30"),
mat.date = as.Date("2023-12-28"), notional = 1000000,
PayRec = "Rec", fixed.rate=0.05, float.curve = usSwapCurves, reset.freq=3,
disc.curve = usSwapCurves, convention = c("act",360),
bus.calendar = "NY", output = "all")
df
df <- swapIRS(trade.date = as.Date("2021-12-26"), eff.date = as.Date("2021-12-30"),
mat.date = as.Date("2023-12-28"), notional = 1000000,
PayRec = "Rec", fixed.rate=0.05, float.curve = usSwapCurves, reset.freq=1,
disc.curve = usSwapCurves, convention = c("act",360),
bus.calendar = "NY", output = "all")
df
df <- swapIRS(trade.date = as.Date("2021-12-26"), eff.date = as.Date("2021-12-30"),
mat.date = as.Date("2023-12-28"), notional = 1000000,
PayRec = "Rec", fixed.rate=0.05, float.curve = usSwapCurves, reset.freq=3,
disc.curve = usSwapCurves, convention = c("act",360),
bus.calendar = "NY", output = "all")
df
df[[2]]
df <- swapIRS(trade.date = as.Date("2021-12-26"), eff.date = as.Date("2021-12-30"),
mat.date = as.Date("2023-12-28"), notional = 1000000,
PayRec = "Rec", fixed.rate=0.05, float.curve = usSwapCurves, reset.freq=3,
disc.curve = usSwapCurves, convention = c("act",365),
bus.calendar = "NY", output = "all")
df
lubridate::today()
getIRswapCurve()
?getIRswapCurve
usSwapIR <- dplyr::tibble(tickQL = c("d1d","d1w","d1m","d3m","d6m","d1y",
paste0("fut",1:8),
paste0("s",c(2,3,5,7,10,15,20,30),"y")),
type = c(rep("ICE.LIBOR",6),rep("EuroDollar",8),rep("IRS",8)),
source = c(rep("FRED",6),rep("Morningstar",8),rep("FRED",8)),
tickSource = c("USDONTD156N","USD1WKD156N","USD1MTD156N","USD3MTD156N","USD6MTD156N","USD12MD156N",
paste0("ED_",sprintf('%0.3d', 1:8),"_Month"),
paste0("ICERATES1100USD",c(2,3,5,7,10,15,20,30),"Y")))
usSwapIR
ir <- usSwapIR
View(ir)
# getIRswapCurve
getIRswapCurve(iuser=username, ipass=password)
# getIRswapCurve
ir <- getIRswapCurve(iuser=username, ipass=password)
View(ir)
View(usSwapIR)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_condaenv("risktools", required=TRUE)
py_config()
reticulate::repl_python()
